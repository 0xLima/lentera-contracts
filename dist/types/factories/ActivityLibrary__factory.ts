/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ActivityLibrary,
  ActivityLibraryInterface,
} from "../ActivityLibrary";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "borrowedTimes",
        type: "uint16",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "lentTimes",
        type: "uint16",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "borrowedVolume",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lentVolume",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lastActive",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "collateralVolume",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "interestPaidVolume",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "defaultedTimes",
        type: "uint16",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "defaultedVolume",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "firstBorrowAt",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "activeLoans",
        type: "uint16",
      },
    ],
    name: "ActivityChanged",
    type: "event",
  },
];

const _bytecode =
  "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220782fc82bca4aea786ac496dd0f4508944a75e4420341e71b8e9e26f51346aec864736f6c63430008140033";

type ActivityLibraryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ActivityLibraryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ActivityLibrary__factory extends ContractFactory {
  constructor(...args: ActivityLibraryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ActivityLibrary> {
    return super.deploy(overrides || {}) as Promise<ActivityLibrary>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ActivityLibrary {
    return super.attach(address) as ActivityLibrary;
  }
  connect(signer: Signer): ActivityLibrary__factory {
    return super.connect(signer) as ActivityLibrary__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ActivityLibraryInterface {
    return new utils.Interface(_abi) as ActivityLibraryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ActivityLibrary {
    return new Contract(address, _abi, signerOrProvider) as ActivityLibrary;
  }
}
