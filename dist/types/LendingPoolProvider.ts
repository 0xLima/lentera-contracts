/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface LendingPoolProviderInterface extends utils.Interface {
  functions: {
    "ACCEPT_REQUEST()": FunctionFragment;
    "EXPIRE_REQUEST()": FunctionFragment;
    "LIQUIDATION()": FunctionFragment;
    "REJECT_REQUEST()": FunctionFragment;
    "REPAID_LOAN()": FunctionFragment;
    "notify(address,address,uint256,uint256)": FunctionFragment;
    "transfer(uint256,address,uint256,address,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ACCEPT_REQUEST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXPIRE_REQUEST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REJECT_REQUEST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REPAID_LOAN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "notify",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [BigNumberish, string, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACCEPT_REQUEST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXPIRE_REQUEST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REJECT_REQUEST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REPAID_LOAN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "notify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;

  events: {
    "Notify(uint256,uint256,address,address,uint256)": EventFragment;
    "Transfer(uint256,uint256,address,uint256,address,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Notify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type NotifyEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  {
    id: BigNumber;
    timestamp: BigNumber;
    from: string;
    to: string;
    fieldId: BigNumber;
  }
>;

export type NotifyEventFilter = TypedEventFilter<NotifyEvent>;

export type TransferEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string, number, BigNumber],
  {
    transferId: BigNumber;
    offerId: BigNumber;
    from: string;
    amount: BigNumber;
    token: string;
    transferType: number;
    timestamp: BigNumber;
  }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface LendingPoolProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LendingPoolProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACCEPT_REQUEST(overrides?: CallOverrides): Promise<[BigNumber]>;

    EXPIRE_REQUEST(overrides?: CallOverrides): Promise<[BigNumber]>;

    LIQUIDATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    REJECT_REQUEST(overrides?: CallOverrides): Promise<[BigNumber]>;

    REPAID_LOAN(overrides?: CallOverrides): Promise<[BigNumber]>;

    notify(
      from: string,
      to: string,
      notification: BigNumberish,
      fieldId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transfer(
      offerId: BigNumberish,
      from: string,
      amount: BigNumberish,
      token: string,
      transferType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ACCEPT_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

  EXPIRE_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

  LIQUIDATION(overrides?: CallOverrides): Promise<BigNumber>;

  REJECT_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

  REPAID_LOAN(overrides?: CallOverrides): Promise<BigNumber>;

  notify(
    from: string,
    to: string,
    notification: BigNumberish,
    fieldId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transfer(
    offerId: BigNumberish,
    from: string,
    amount: BigNumberish,
    token: string,
    transferType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ACCEPT_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

    EXPIRE_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION(overrides?: CallOverrides): Promise<BigNumber>;

    REJECT_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

    REPAID_LOAN(overrides?: CallOverrides): Promise<BigNumber>;

    notify(
      from: string,
      to: string,
      notification: BigNumberish,
      fieldId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transfer(
      offerId: BigNumberish,
      from: string,
      amount: BigNumberish,
      token: string,
      transferType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Notify(uint256,uint256,address,address,uint256)"(
      id?: null,
      timestamp?: null,
      from?: null,
      to?: null,
      fieldId?: null
    ): NotifyEventFilter;
    Notify(
      id?: null,
      timestamp?: null,
      from?: null,
      to?: null,
      fieldId?: null
    ): NotifyEventFilter;

    "Transfer(uint256,uint256,address,uint256,address,uint8,uint256)"(
      transferId?: null,
      offerId?: null,
      from?: null,
      amount?: null,
      token?: null,
      transferType?: null,
      timestamp?: null
    ): TransferEventFilter;
    Transfer(
      transferId?: null,
      offerId?: null,
      from?: null,
      amount?: null,
      token?: null,
      transferType?: null,
      timestamp?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    ACCEPT_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

    EXPIRE_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION(overrides?: CallOverrides): Promise<BigNumber>;

    REJECT_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

    REPAID_LOAN(overrides?: CallOverrides): Promise<BigNumber>;

    notify(
      from: string,
      to: string,
      notification: BigNumberish,
      fieldId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transfer(
      offerId: BigNumberish,
      from: string,
      amount: BigNumberish,
      token: string,
      transferType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACCEPT_REQUEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXPIRE_REQUEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIQUIDATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REJECT_REQUEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REPAID_LOAN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notify(
      from: string,
      to: string,
      notification: BigNumberish,
      fieldId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transfer(
      offerId: BigNumberish,
      from: string,
      amount: BigNumberish,
      token: string,
      transferType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
