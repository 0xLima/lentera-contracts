/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ActivityLibraryInterface extends utils.Interface {
  functions: {};

  events: {
    "ActivityChanged(address,uint16,uint16,uint256,uint256,uint256,uint256,uint256,uint16,uint256,uint256,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActivityChanged"): EventFragment;
}

export type ActivityChangedEvent = TypedEvent<
  [
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    number
  ],
  {
    user: string;
    borrowedTimes: number;
    lentTimes: number;
    borrowedVolume: BigNumber;
    lentVolume: BigNumber;
    lastActive: BigNumber;
    collateralVolume: BigNumber;
    interestPaidVolume: BigNumber;
    defaultedTimes: number;
    defaultedVolume: BigNumber;
    firstBorrowAt: BigNumber;
    activeLoans: number;
  }
>;

export type ActivityChangedEventFilter = TypedEventFilter<ActivityChangedEvent>;

export interface ActivityLibrary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ActivityLibraryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ActivityChanged(address,uint16,uint16,uint256,uint256,uint256,uint256,uint256,uint16,uint256,uint256,uint16)"(
      user?: null,
      borrowedTimes?: null,
      lentTimes?: null,
      borrowedVolume?: null,
      lentVolume?: null,
      lastActive?: null,
      collateralVolume?: null,
      interestPaidVolume?: null,
      defaultedTimes?: null,
      defaultedVolume?: null,
      firstBorrowAt?: null,
      activeLoans?: null
    ): ActivityChangedEventFilter;
    ActivityChanged(
      user?: null,
      borrowedTimes?: null,
      lentTimes?: null,
      borrowedVolume?: null,
      lentVolume?: null,
      lastActive?: null,
      collateralVolume?: null,
      interestPaidVolume?: null,
      defaultedTimes?: null,
      defaultedVolume?: null,
      firstBorrowAt?: null,
      activeLoans?: null
    ): ActivityChangedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
