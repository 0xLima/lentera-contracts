/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type LoanStruct = {
  offerId: BigNumberish;
  state: BigNumberish;
  principalToken: string;
  collateralToken: string;
  initialPrincipal: BigNumberish;
  currentPrincipal: BigNumberish;
  initialCollateral: BigNumberish;
  currentCollateral: BigNumberish;
  collateralPriceInUSD: BigNumberish;
  interestRate: BigNumberish;
  startDate: BigNumberish;
  maturityDate: BigNumberish;
  graceDays: BigNumberish;
  numInstallmentsPaid: BigNumberish;
  unClaimedPrincipal: BigNumberish;
  unClaimedCollateral: BigNumberish;
  unClaimedDefaultCollateral: BigNumberish;
  unClaimedBorrowedPrincipal: BigNumberish;
  totalInterestPaid: BigNumberish;
  repaidOn: BigNumberish;
  borrower: string;
  lender: string;
};

export type LoanStructOutput = [
  BigNumber,
  number,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  offerId: BigNumber;
  state: number;
  principalToken: string;
  collateralToken: string;
  initialPrincipal: BigNumber;
  currentPrincipal: BigNumber;
  initialCollateral: BigNumber;
  currentCollateral: BigNumber;
  collateralPriceInUSD: BigNumber;
  interestRate: BigNumber;
  startDate: BigNumber;
  maturityDate: BigNumber;
  graceDays: number;
  numInstallmentsPaid: number;
  unClaimedPrincipal: BigNumber;
  unClaimedCollateral: BigNumber;
  unClaimedDefaultCollateral: BigNumber;
  unClaimedBorrowedPrincipal: BigNumber;
  totalInterestPaid: BigNumber;
  repaidOn: BigNumber;
  borrower: string;
  lender: string;
};

export interface ILoanManagerInterface extends utils.Interface {
  functions: {
    "claimBorrowedPrincipal(uint256,address)": FunctionFragment;
    "claimCollateral(uint256,address)": FunctionFragment;
    "claimDefaultCollateral(uint256,address)": FunctionFragment;
    "claimPrincipal(uint256,address)": FunctionFragment;
    "createLoan(uint256,uint8,address,address,uint256,uint256,uint256,uint256,uint16,uint256,address,address)": FunctionFragment;
    "getLoan(uint256)": FunctionFragment;
    "liquidateLoan(uint256,uint256,uint256,uint256)": FunctionFragment;
    "repayLoan(uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimBorrowedPrincipal",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCollateral",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDefaultCollateral",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPrincipal",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createLoan",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateLoan",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayLoan",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimBorrowedPrincipal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDefaultCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPrincipal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayLoan", data: BytesLike): Result;

  events: {};
}

export interface ILoanManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILoanManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimBorrowedPrincipal(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimCollateral(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimDefaultCollateral(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimPrincipal(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLoan(
      offerId: BigNumberish,
      offerType: BigNumberish,
      principalToken: string,
      collateralToken: string,
      principalAmount: BigNumberish,
      collateralAmount: BigNumberish,
      collateralPriceInUSD: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      unClaimedBorrowedPrincipal: BigNumberish,
      borrower: string,
      lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLoan(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateLoan(
      loanId: BigNumberish,
      principalPaid: BigNumberish,
      collateralRetrieved: BigNumberish,
      collateralPaid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayLoan(
      loanId: BigNumberish,
      interestPaid: BigNumberish,
      principalPaid: BigNumberish,
      collateralRetrieved: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimBorrowedPrincipal(
    loanId: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimCollateral(
    loanId: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimDefaultCollateral(
    loanId: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimPrincipal(
    loanId: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLoan(
    offerId: BigNumberish,
    offerType: BigNumberish,
    principalToken: string,
    collateralToken: string,
    principalAmount: BigNumberish,
    collateralAmount: BigNumberish,
    collateralPriceInUSD: BigNumberish,
    interestRate: BigNumberish,
    daysToMaturity: BigNumberish,
    unClaimedBorrowedPrincipal: BigNumberish,
    borrower: string,
    lender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLoan(
    loanId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateLoan(
    loanId: BigNumberish,
    principalPaid: BigNumberish,
    collateralRetrieved: BigNumberish,
    collateralPaid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayLoan(
    loanId: BigNumberish,
    interestPaid: BigNumberish,
    principalPaid: BigNumberish,
    collateralRetrieved: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimBorrowedPrincipal(
      loanId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    claimCollateral(
      loanId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    claimDefaultCollateral(
      loanId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    claimPrincipal(
      loanId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    createLoan(
      offerId: BigNumberish,
      offerType: BigNumberish,
      principalToken: string,
      collateralToken: string,
      principalAmount: BigNumberish,
      collateralAmount: BigNumberish,
      collateralPriceInUSD: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      unClaimedBorrowedPrincipal: BigNumberish,
      borrower: string,
      lender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoan(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LoanStructOutput>;

    liquidateLoan(
      loanId: BigNumberish,
      principalPaid: BigNumberish,
      collateralRetrieved: BigNumberish,
      collateralPaid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayLoan(
      loanId: BigNumberish,
      interestPaid: BigNumberish,
      principalPaid: BigNumberish,
      collateralRetrieved: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    claimBorrowedPrincipal(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimCollateral(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimDefaultCollateral(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimPrincipal(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLoan(
      offerId: BigNumberish,
      offerType: BigNumberish,
      principalToken: string,
      collateralToken: string,
      principalAmount: BigNumberish,
      collateralAmount: BigNumberish,
      collateralPriceInUSD: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      unClaimedBorrowedPrincipal: BigNumberish,
      borrower: string,
      lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLoan(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateLoan(
      loanId: BigNumberish,
      principalPaid: BigNumberish,
      collateralRetrieved: BigNumberish,
      collateralPaid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayLoan(
      loanId: BigNumberish,
      interestPaid: BigNumberish,
      principalPaid: BigNumberish,
      collateralRetrieved: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimBorrowedPrincipal(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimCollateral(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimDefaultCollateral(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimPrincipal(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLoan(
      offerId: BigNumberish,
      offerType: BigNumberish,
      principalToken: string,
      collateralToken: string,
      principalAmount: BigNumberish,
      collateralAmount: BigNumberish,
      collateralPriceInUSD: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      unClaimedBorrowedPrincipal: BigNumberish,
      borrower: string,
      lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLoan(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateLoan(
      loanId: BigNumberish,
      principalPaid: BigNumberish,
      collateralRetrieved: BigNumberish,
      collateralPaid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayLoan(
      loanId: BigNumberish,
      interestPaid: BigNumberish,
      principalPaid: BigNumberish,
      collateralRetrieved: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
