/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface LendingPoolInterface extends utils.Interface {
  functions: {
    "ACCEPT_REQUEST()": FunctionFragment;
    "EXPIRE_REQUEST()": FunctionFragment;
    "INTEREST_RATE_DENOMINATOR()": FunctionFragment;
    "LENDINGPOOL_VERSION()": FunctionFragment;
    "LIQUIDATION()": FunctionFragment;
    "PERCENT()": FunctionFragment;
    "REJECT_REQUEST()": FunctionFragment;
    "REPAID_LOAN()": FunctionFragment;
    "acceptBorrowingOffer(uint256,uint16)": FunctionFragment;
    "acceptBorrowingRequest(uint256)": FunctionFragment;
    "acceptLendingOffer(uint256,uint16,address)": FunctionFragment;
    "acceptLendingRequest(uint256)": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "cancelRequest(uint256)": FunctionFragment;
    "checkPercentage(uint16)": FunctionFragment;
    "claim(address,address,uint256)": FunctionFragment;
    "claimBorrowedPrincipal(uint256)": FunctionFragment;
    "claimCollateral(uint256)": FunctionFragment;
    "claimDefaultCollateral(uint256)": FunctionFragment;
    "claimPrincipal(uint256)": FunctionFragment;
    "createBorrowingOffer(address,uint256,address,uint256,uint16,uint16)": FunctionFragment;
    "createBorrowingRequest(uint256,uint16,address,uint256,uint16,uint16)": FunctionFragment;
    "createLendingOffer(uint256,address,address[],uint16,uint256,uint16)": FunctionFragment;
    "createLendingRequest(uint256,uint16,uint16,uint256,uint16)": FunctionFragment;
    "getFullInterestAmount(uint256,uint256,uint256)": FunctionFragment;
    "getVersion()": FunctionFragment;
    "liquidateLoan(uint256)": FunctionFragment;
    "nativeAddress()": FunctionFragment;
    "notify(address,address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "percentageOf(uint256,uint160)": FunctionFragment;
    "reActivateOffer(uint256,uint16)": FunctionFragment;
    "rejectRequest(uint256)": FunctionFragment;
    "removeCollateral(uint256,uint16)": FunctionFragment;
    "removePrincipal(uint256,uint16)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repayLiquidatedLoan(uint256)": FunctionFragment;
    "repayLoan(uint256,uint16)": FunctionFragment;
    "setFeeds(address,address,address)": FunctionFragment;
    "setManagers(address,address,address)": FunctionFragment;
    "transfer(uint256,address,uint256,address,uint8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ACCEPT_REQUEST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXPIRE_REQUEST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INTEREST_RATE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LENDINGPOOL_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PERCENT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REJECT_REQUEST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REPAID_LOAN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptBorrowingOffer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptBorrowingRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptLendingOffer",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptLendingRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBorrowedPrincipal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDefaultCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPrincipal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createBorrowingOffer",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createBorrowingRequest",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createLendingOffer",
    values: [
      BigNumberish,
      string,
      string[],
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createLendingRequest",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFullInterestAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "notify",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "percentageOf",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reActivateOffer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removePrincipal",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayLiquidatedLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayLoan",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeds",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagers",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [BigNumberish, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACCEPT_REQUEST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXPIRE_REQUEST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INTEREST_RATE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LENDINGPOOL_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PERCENT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REJECT_REQUEST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REPAID_LOAN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptBorrowingOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptBorrowingRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptLendingOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptLendingRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimBorrowedPrincipal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDefaultCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPrincipal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBorrowingOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBorrowingRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLendingOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLendingRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFullInterestAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "notify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "percentageOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reActivateOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePrincipal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayLiquidatedLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Notify(uint256,uint256,address,address,uint256)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Transfer(uint256,uint256,address,uint256,address,uint8,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Notify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type NotifyEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  {
    id: BigNumber;
    timestamp: BigNumber;
    from: string;
    to: string;
    fieldId: BigNumber;
  }
>;

export type NotifyEventFilter = TypedEventFilter<NotifyEvent>;

export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type TransferEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string, number, BigNumber],
  {
    transferId: BigNumber;
    offerId: BigNumber;
    from: string;
    amount: BigNumber;
    token: string;
    transferType: number;
    timestamp: BigNumber;
  }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface LendingPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LendingPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACCEPT_REQUEST(overrides?: CallOverrides): Promise<[BigNumber]>;

    EXPIRE_REQUEST(overrides?: CallOverrides): Promise<[BigNumber]>;

    INTEREST_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    LENDINGPOOL_VERSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    LIQUIDATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENT(overrides?: CallOverrides): Promise<[number]>;

    REJECT_REQUEST(overrides?: CallOverrides): Promise<[BigNumber]>;

    REPAID_LOAN(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptBorrowingOffer(
      offerId: BigNumberish,
      percentage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptBorrowingRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptLendingOffer(
      offerId: BigNumberish,
      percentage: BigNumberish,
      collateralToken: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptLendingRequest(
      requestId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkPercentage(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    claim(
      token: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimBorrowedPrincipal(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimCollateral(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimDefaultCollateral(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimPrincipal(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createBorrowingOffer(
      principalToken: string,
      principalAmount: BigNumberish,
      collateralToken: string,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createBorrowingRequest(
      offerId: BigNumberish,
      percentage: BigNumberish,
      collateralToken: string,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLendingOffer(
      principalAmount_: BigNumberish,
      principalToken: string,
      collateralTokens: string[],
      daysToMaturity: BigNumberish,
      interestRate: BigNumberish,
      daysToExpire: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLendingRequest(
      offerId: BigNumberish,
      percentage: BigNumberish,
      daysToMaturity: BigNumberish,
      interestRate: BigNumberish,
      hoursToExpire: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFullInterestAmount(
      principal: BigNumberish,
      durationSecs: BigNumberish,
      interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidateLoan(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nativeAddress(overrides?: CallOverrides): Promise<[string]>;

    notify(
      from: string,
      to: string,
      notification: BigNumberish,
      fieldId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    percentageOf(
      total: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reActivateOffer(
      offerId: BigNumberish,
      toExpire: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rejectRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeCollateral(
      offerId: BigNumberish,
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePrincipal(
      offerId: BigNumberish,
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayLiquidatedLoan(
      loanId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayLoan(
      loanId: BigNumberish,
      percentage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeds(
      ltv_: string,
      activity_: string,
      priceFeed_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManagers(
      loanManager_: string,
      offerManager_: string,
      feeManager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transfer(
      offerId: BigNumberish,
      from: string,
      amount: BigNumberish,
      token: string,
      transferType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ACCEPT_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

  EXPIRE_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

  INTEREST_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  LENDINGPOOL_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

  LIQUIDATION(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENT(overrides?: CallOverrides): Promise<number>;

  REJECT_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

  REPAID_LOAN(overrides?: CallOverrides): Promise<BigNumber>;

  acceptBorrowingOffer(
    offerId: BigNumberish,
    percentage: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptBorrowingRequest(
    requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptLendingOffer(
    offerId: BigNumberish,
    percentage: BigNumberish,
    collateralToken: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptLendingRequest(
    requestId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelRequest(
    requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkPercentage(
    percentage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  claim(
    token: string,
    receiver: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimBorrowedPrincipal(
    loanId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimCollateral(
    loanId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimDefaultCollateral(
    loanId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimPrincipal(
    loanId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createBorrowingOffer(
    principalToken: string,
    principalAmount: BigNumberish,
    collateralToken: string,
    interestRate: BigNumberish,
    daysToMaturity: BigNumberish,
    hoursToExpire: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createBorrowingRequest(
    offerId: BigNumberish,
    percentage: BigNumberish,
    collateralToken: string,
    interestRate: BigNumberish,
    daysToMaturity: BigNumberish,
    hoursToExpire: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLendingOffer(
    principalAmount_: BigNumberish,
    principalToken: string,
    collateralTokens: string[],
    daysToMaturity: BigNumberish,
    interestRate: BigNumberish,
    daysToExpire: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLendingRequest(
    offerId: BigNumberish,
    percentage: BigNumberish,
    daysToMaturity: BigNumberish,
    interestRate: BigNumberish,
    hoursToExpire: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFullInterestAmount(
    principal: BigNumberish,
    durationSecs: BigNumberish,
    interestRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVersion(overrides?: CallOverrides): Promise<BigNumber>;

  liquidateLoan(
    loanId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nativeAddress(overrides?: CallOverrides): Promise<string>;

  notify(
    from: string,
    to: string,
    notification: BigNumberish,
    fieldId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  percentageOf(
    total: BigNumberish,
    percent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reActivateOffer(
    offerId: BigNumberish,
    toExpire: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rejectRequest(
    requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeCollateral(
    offerId: BigNumberish,
    percentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePrincipal(
    offerId: BigNumberish,
    percentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayLiquidatedLoan(
    loanId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayLoan(
    loanId: BigNumberish,
    percentage: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeds(
    ltv_: string,
    activity_: string,
    priceFeed_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManagers(
    loanManager_: string,
    offerManager_: string,
    feeManager_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transfer(
    offerId: BigNumberish,
    from: string,
    amount: BigNumberish,
    token: string,
    transferType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ACCEPT_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

    EXPIRE_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    LENDINGPOOL_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT(overrides?: CallOverrides): Promise<number>;

    REJECT_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

    REPAID_LOAN(overrides?: CallOverrides): Promise<BigNumber>;

    acceptBorrowingOffer(
      offerId: BigNumberish,
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptBorrowingRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptLendingOffer(
      offerId: BigNumberish,
      percentage: BigNumberish,
      collateralToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptLendingRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    cancelRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkPercentage(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      token: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimBorrowedPrincipal(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimCollateral(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimDefaultCollateral(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimPrincipal(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createBorrowingOffer(
      principalToken: string,
      principalAmount: BigNumberish,
      collateralToken: string,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createBorrowingRequest(
      offerId: BigNumberish,
      percentage: BigNumberish,
      collateralToken: string,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createLendingOffer(
      principalAmount_: BigNumberish,
      principalToken: string,
      collateralTokens: string[],
      daysToMaturity: BigNumberish,
      interestRate: BigNumberish,
      daysToExpire: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createLendingRequest(
      offerId: BigNumberish,
      percentage: BigNumberish,
      daysToMaturity: BigNumberish,
      interestRate: BigNumberish,
      hoursToExpire: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getFullInterestAmount(
      principal: BigNumberish,
      durationSecs: BigNumberish,
      interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateLoan(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nativeAddress(overrides?: CallOverrides): Promise<string>;

    notify(
      from: string,
      to: string,
      notification: BigNumberish,
      fieldId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    percentageOf(
      total: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reActivateOffer(
      offerId: BigNumberish,
      toExpire: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeCollateral(
      offerId: BigNumberish,
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removePrincipal(
      offerId: BigNumberish,
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repayLiquidatedLoan(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayLoan(
      loanId: BigNumberish,
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeds(
      ltv_: string,
      activity_: string,
      priceFeed_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setManagers(
      loanManager_: string,
      offerManager_: string,
      feeManager_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transfer(
      offerId: BigNumberish,
      from: string,
      amount: BigNumberish,
      token: string,
      transferType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Notify(uint256,uint256,address,address,uint256)"(
      id?: null,
      timestamp?: null,
      from?: null,
      to?: null,
      fieldId?: null
    ): NotifyEventFilter;
    Notify(
      id?: null,
      timestamp?: null,
      from?: null,
      to?: null,
      fieldId?: null
    ): NotifyEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Transfer(uint256,uint256,address,uint256,address,uint8,uint256)"(
      transferId?: null,
      offerId?: null,
      from?: null,
      amount?: null,
      token?: null,
      transferType?: null,
      timestamp?: null
    ): TransferEventFilter;
    Transfer(
      transferId?: null,
      offerId?: null,
      from?: null,
      amount?: null,
      token?: null,
      transferType?: null,
      timestamp?: null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    ACCEPT_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

    EXPIRE_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    LENDINGPOOL_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    REJECT_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

    REPAID_LOAN(overrides?: CallOverrides): Promise<BigNumber>;

    acceptBorrowingOffer(
      offerId: BigNumberish,
      percentage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptBorrowingRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptLendingOffer(
      offerId: BigNumberish,
      percentage: BigNumberish,
      collateralToken: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptLendingRequest(
      requestId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkPercentage(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      token: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimBorrowedPrincipal(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimCollateral(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimDefaultCollateral(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimPrincipal(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createBorrowingOffer(
      principalToken: string,
      principalAmount: BigNumberish,
      collateralToken: string,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createBorrowingRequest(
      offerId: BigNumberish,
      percentage: BigNumberish,
      collateralToken: string,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLendingOffer(
      principalAmount_: BigNumberish,
      principalToken: string,
      collateralTokens: string[],
      daysToMaturity: BigNumberish,
      interestRate: BigNumberish,
      daysToExpire: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLendingRequest(
      offerId: BigNumberish,
      percentage: BigNumberish,
      daysToMaturity: BigNumberish,
      interestRate: BigNumberish,
      hoursToExpire: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFullInterestAmount(
      principal: BigNumberish,
      durationSecs: BigNumberish,
      interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateLoan(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nativeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    notify(
      from: string,
      to: string,
      notification: BigNumberish,
      fieldId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    percentageOf(
      total: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reActivateOffer(
      offerId: BigNumberish,
      toExpire: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rejectRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeCollateral(
      offerId: BigNumberish,
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePrincipal(
      offerId: BigNumberish,
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayLiquidatedLoan(
      loanId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayLoan(
      loanId: BigNumberish,
      percentage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeds(
      ltv_: string,
      activity_: string,
      priceFeed_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManagers(
      loanManager_: string,
      offerManager_: string,
      feeManager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transfer(
      offerId: BigNumberish,
      from: string,
      amount: BigNumberish,
      token: string,
      transferType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACCEPT_REQUEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXPIRE_REQUEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INTEREST_RATE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LENDINGPOOL_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIQUIDATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REJECT_REQUEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REPAID_LOAN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptBorrowingOffer(
      offerId: BigNumberish,
      percentage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptBorrowingRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptLendingOffer(
      offerId: BigNumberish,
      percentage: BigNumberish,
      collateralToken: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptLendingRequest(
      requestId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkPercentage(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      token: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimBorrowedPrincipal(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimCollateral(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimDefaultCollateral(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimPrincipal(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createBorrowingOffer(
      principalToken: string,
      principalAmount: BigNumberish,
      collateralToken: string,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createBorrowingRequest(
      offerId: BigNumberish,
      percentage: BigNumberish,
      collateralToken: string,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLendingOffer(
      principalAmount_: BigNumberish,
      principalToken: string,
      collateralTokens: string[],
      daysToMaturity: BigNumberish,
      interestRate: BigNumberish,
      daysToExpire: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLendingRequest(
      offerId: BigNumberish,
      percentage: BigNumberish,
      daysToMaturity: BigNumberish,
      interestRate: BigNumberish,
      hoursToExpire: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFullInterestAmount(
      principal: BigNumberish,
      durationSecs: BigNumberish,
      interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateLoan(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nativeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notify(
      from: string,
      to: string,
      notification: BigNumberish,
      fieldId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    percentageOf(
      total: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reActivateOffer(
      offerId: BigNumberish,
      toExpire: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rejectRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeCollateral(
      offerId: BigNumberish,
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePrincipal(
      offerId: BigNumberish,
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayLiquidatedLoan(
      loanId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayLoan(
      loanId: BigNumberish,
      percentage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeds(
      ltv_: string,
      activity_: string,
      priceFeed_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManagers(
      loanManager_: string,
      offerManager_: string,
      feeManager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transfer(
      offerId: BigNumberish,
      from: string,
      amount: BigNumberish,
      token: string,
      transferType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
