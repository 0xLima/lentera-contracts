/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SimpleInterestInterface extends utils.Interface {
  functions: {
    "INTEREST_RATE_DENOMINATOR()": FunctionFragment;
    "PERCENT()": FunctionFragment;
    "checkPercentage(uint16)": FunctionFragment;
    "getFullInterestAmount(uint256,uint256,uint256)": FunctionFragment;
    "percentageOf(uint256,uint160)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "INTEREST_RATE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PERCENT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFullInterestAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "percentageOf",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "INTEREST_RATE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PERCENT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFullInterestAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "percentageOf",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SimpleInterest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleInterestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INTEREST_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENT(overrides?: CallOverrides): Promise<[number]>;

    checkPercentage(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getFullInterestAmount(
      principal: BigNumberish,
      durationSecs: BigNumberish,
      interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    percentageOf(
      total: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  INTEREST_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENT(overrides?: CallOverrides): Promise<number>;

  checkPercentage(
    percentage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  getFullInterestAmount(
    principal: BigNumberish,
    durationSecs: BigNumberish,
    interestRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  percentageOf(
    total: BigNumberish,
    percent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    INTEREST_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT(overrides?: CallOverrides): Promise<number>;

    checkPercentage(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getFullInterestAmount(
      principal: BigNumberish,
      durationSecs: BigNumberish,
      interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    percentageOf(
      total: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    INTEREST_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    checkPercentage(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFullInterestAmount(
      principal: BigNumberish,
      durationSecs: BigNumberish,
      interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    percentageOf(
      total: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INTEREST_RATE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkPercentage(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFullInterestAmount(
      principal: BigNumberish,
      durationSecs: BigNumberish,
      interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    percentageOf(
      total: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
