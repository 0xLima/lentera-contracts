/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ModelStruct = {
  borrowedTimes: BigNumberish;
  lentTimes: BigNumberish;
  borrowedVolume: BigNumberish;
  lentVolume: BigNumberish;
  lastActive: BigNumberish;
  collateralVolume: BigNumberish;
  interestPaidVolume: BigNumberish;
  defaultedTimes: BigNumberish;
  defaultedVolume: BigNumberish;
  firstBorrowAt: BigNumberish;
  activeLoans: BigNumberish;
};

export type ModelStructOutput = [
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  number
] & {
  borrowedTimes: number;
  lentTimes: number;
  borrowedVolume: BigNumber;
  lentVolume: BigNumber;
  lastActive: BigNumber;
  collateralVolume: BigNumber;
  interestPaidVolume: BigNumber;
  defaultedTimes: number;
  defaultedVolume: BigNumber;
  firstBorrowAt: BigNumber;
  activeLoans: number;
};

export interface IActivityInterface extends utils.Interface {
  functions: {
    "activeLoansCount(address)": FunctionFragment;
    "borrowLoan(address,address,uint256)": FunctionFragment;
    "dropCollateral(address,uint256)": FunctionFragment;
    "getActivity(address)": FunctionFragment;
    "isDefaulter(address)": FunctionFragment;
    "repayLoan(address,address,uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activeLoansCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowLoan",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dropCollateral",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getActivity", values: [string]): string;
  encodeFunctionData(functionFragment: "isDefaulter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "repayLoan",
    values: [string, string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeLoansCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dropCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDefaulter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayLoan", data: BytesLike): Result;

  events: {};
}

export interface IActivity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IActivityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeLoansCount(
      user: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    borrowLoan(
      lender: string,
      borrower: string,
      amountBorrowedInUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dropCollateral(
      borrower: string,
      amountInUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getActivity(
      user: string,
      overrides?: CallOverrides
    ): Promise<[ModelStructOutput]>;

    isDefaulter(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayLoan(
      lender: string,
      borrower: string,
      interestPaidInUSD: BigNumberish,
      completed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activeLoansCount(user: string, overrides?: CallOverrides): Promise<number>;

  borrowLoan(
    lender: string,
    borrower: string,
    amountBorrowedInUSD: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dropCollateral(
    borrower: string,
    amountInUSD: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getActivity(
    user: string,
    overrides?: CallOverrides
  ): Promise<ModelStructOutput>;

  isDefaulter(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayLoan(
    lender: string,
    borrower: string,
    interestPaidInUSD: BigNumberish,
    completed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeLoansCount(user: string, overrides?: CallOverrides): Promise<number>;

    borrowLoan(
      lender: string,
      borrower: string,
      amountBorrowedInUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dropCollateral(
      borrower: string,
      amountInUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getActivity(
      user: string,
      overrides?: CallOverrides
    ): Promise<ModelStructOutput>;

    isDefaulter(user: string, overrides?: CallOverrides): Promise<boolean>;

    repayLoan(
      lender: string,
      borrower: string,
      interestPaidInUSD: BigNumberish,
      completed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    activeLoansCount(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowLoan(
      lender: string,
      borrower: string,
      amountBorrowedInUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dropCollateral(
      borrower: string,
      amountInUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getActivity(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    isDefaulter(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayLoan(
      lender: string,
      borrower: string,
      interestPaidInUSD: BigNumberish,
      completed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeLoansCount(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowLoan(
      lender: string,
      borrower: string,
      amountBorrowedInUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dropCollateral(
      borrower: string,
      amountInUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getActivity(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDefaulter(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayLoan(
      lender: string,
      borrower: string,
      interestPaidInUSD: BigNumberish,
      completed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
