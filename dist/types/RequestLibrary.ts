/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface RequestLibraryInterface extends utils.Interface {
  functions: {};

  events: {
    "RequestCreated(uint256,uint8,uint16,uint16,uint256,uint256,uint256,address,uint256,address,uint256,uint256,uint160,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RequestCreated"): EventFragment;
}

export type RequestCreatedEvent = TypedEvent<
  [
    BigNumber,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ],
  {
    requestId: BigNumber;
    state: number;
    percentage: number;
    daysToMaturity: number;
    interestRate: BigNumber;
    expiresAt: BigNumber;
    createdAt: BigNumber;
    creator: string;
    offerId: BigNumber;
    collateralToken: string;
    collateralAmount: BigNumber;
    collateralPriceInUSD: BigNumber;
    ltvUsed: BigNumber;
    requestType: number;
  }
>;

export type RequestCreatedEventFilter = TypedEventFilter<RequestCreatedEvent>;

export interface RequestLibrary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RequestLibraryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "RequestCreated(uint256,uint8,uint16,uint16,uint256,uint256,uint256,address,uint256,address,uint256,uint256,uint160,uint8)"(
      requestId?: null,
      state?: null,
      percentage?: null,
      daysToMaturity?: null,
      interestRate?: null,
      expiresAt?: null,
      createdAt?: null,
      creator?: null,
      offerId?: null,
      collateralToken?: null,
      collateralAmount?: null,
      collateralPriceInUSD?: null,
      ltvUsed?: null,
      requestType?: null
    ): RequestCreatedEventFilter;
    RequestCreated(
      requestId?: null,
      state?: null,
      percentage?: null,
      daysToMaturity?: null,
      interestRate?: null,
      expiresAt?: null,
      createdAt?: null,
      creator?: null,
      offerId?: null,
      collateralToken?: null,
      collateralAmount?: null,
      collateralPriceInUSD?: null,
      ltvUsed?: null,
      requestType?: null
    ): RequestCreatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
