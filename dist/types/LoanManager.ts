/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type LoanStruct = {
  offerId: BigNumberish;
  state: BigNumberish;
  principalToken: string;
  collateralToken: string;
  initialPrincipal: BigNumberish;
  currentPrincipal: BigNumberish;
  initialCollateral: BigNumberish;
  currentCollateral: BigNumberish;
  collateralPriceInUSD: BigNumberish;
  interestRate: BigNumberish;
  startDate: BigNumberish;
  maturityDate: BigNumberish;
  graceDays: BigNumberish;
  numInstallmentsPaid: BigNumberish;
  unClaimedPrincipal: BigNumberish;
  unClaimedCollateral: BigNumberish;
  unClaimedDefaultCollateral: BigNumberish;
  unClaimedBorrowedPrincipal: BigNumberish;
  totalInterestPaid: BigNumberish;
  repaidOn: BigNumberish;
  borrower: string;
  lender: string;
};

export type LoanStructOutput = [
  BigNumber,
  number,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  offerId: BigNumber;
  state: number;
  principalToken: string;
  collateralToken: string;
  initialPrincipal: BigNumber;
  currentPrincipal: BigNumber;
  initialCollateral: BigNumber;
  currentCollateral: BigNumber;
  collateralPriceInUSD: BigNumber;
  interestRate: BigNumber;
  startDate: BigNumber;
  maturityDate: BigNumber;
  graceDays: number;
  numInstallmentsPaid: number;
  unClaimedPrincipal: BigNumber;
  unClaimedCollateral: BigNumber;
  unClaimedDefaultCollateral: BigNumber;
  unClaimedBorrowedPrincipal: BigNumber;
  totalInterestPaid: BigNumber;
  repaidOn: BigNumber;
  borrower: string;
  lender: string;
};

export interface LoanManagerInterface extends utils.Interface {
  functions: {
    "DUST_AMOUNT()": FunctionFragment;
    "ONE_DAY()": FunctionFragment;
    "ONE_HOUR()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "claimBorrowedPrincipal(uint256,address)": FunctionFragment;
    "claimCollateral(uint256,address)": FunctionFragment;
    "claimDefaultCollateral(uint256,address)": FunctionFragment;
    "claimPrincipal(uint256,address)": FunctionFragment;
    "createLoan(uint256,uint8,address,address,uint256,uint256,uint256,uint256,uint16,uint256,address,address)": FunctionFragment;
    "getLoan(uint256)": FunctionFragment;
    "liquidateLoan(uint256,uint256,uint256,uint256)": FunctionFragment;
    "loans(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repayLoan(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setGraceDays(uint16)": FunctionFragment;
    "setLendingPool(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DUST_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE_DAY", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONE_HOUR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimBorrowedPrincipal",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCollateral",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDefaultCollateral",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPrincipal",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createLoan",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateLoan",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "loans", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayLoan",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGraceDays",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DUST_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONE_DAY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE_HOUR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBorrowedPrincipal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDefaultCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPrincipal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGraceDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "LoanCreated(uint256,uint256,uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint16,address,address)": EventFragment;
    "LoanCreatedProperty(uint256,uint256,uint8,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LoanCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanCreatedProperty"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type LoanCreatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    string
  ],
  {
    loanId: BigNumber;
    offerId: BigNumber;
    state: number;
    principalToken: string;
    collateralToken: string;
    initialPrincipal: BigNumber;
    currentPrincipal: BigNumber;
    initialCollateral: BigNumber;
    currentCollateral: BigNumber;
    interestRate: BigNumber;
    startDate: BigNumber;
    maturityDate: BigNumber;
    graceDays: number;
    borrower: string;
    lender: string;
  }
>;

export type LoanCreatedEventFilter = TypedEventFilter<LoanCreatedEvent>;

export type LoanCreatedPropertyEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    loanId: BigNumber;
    collateralPriceInUSD: BigNumber;
    numInstallmentsPaid: number;
    unClaimedPrincipal: BigNumber;
    unClaimedCollateral: BigNumber;
    unClaimedDefaultCollateral: BigNumber;
    unClaimedBorrowedPrincipal: BigNumber;
    totalInterestPaid: BigNumber;
    repaidOn: BigNumber;
  }
>;

export type LoanCreatedPropertyEventFilter =
  TypedEventFilter<LoanCreatedPropertyEvent>;

export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface LoanManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LoanManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DUST_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_DAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_HOUR(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimBorrowedPrincipal(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimCollateral(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimDefaultCollateral(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimPrincipal(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLoan(
      offerId: BigNumberish,
      offerType: BigNumberish,
      principalToken: string,
      collateralToken: string,
      principalAmount: BigNumberish,
      collateralAmount: BigNumberish,
      collateralPriceInUSD: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      unClaimedBorrowedPrincipal: BigNumberish,
      borrower: string,
      lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLoan(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[LoanStructOutput]>;

    liquidateLoan(
      loanId: BigNumberish,
      principalPaid: BigNumberish,
      collateralRetrieved: BigNumberish,
      collateralPaid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    loans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        offerId: BigNumber;
        state: number;
        principalToken: string;
        collateralToken: string;
        initialPrincipal: BigNumber;
        currentPrincipal: BigNumber;
        initialCollateral: BigNumber;
        currentCollateral: BigNumber;
        collateralPriceInUSD: BigNumber;
        interestRate: BigNumber;
        startDate: BigNumber;
        maturityDate: BigNumber;
        graceDays: number;
        numInstallmentsPaid: number;
        unClaimedPrincipal: BigNumber;
        unClaimedCollateral: BigNumber;
        unClaimedDefaultCollateral: BigNumber;
        unClaimedBorrowedPrincipal: BigNumber;
        totalInterestPaid: BigNumber;
        repaidOn: BigNumber;
        borrower: string;
        lender: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayLoan(
      loanId: BigNumberish,
      interestPaid: BigNumberish,
      principalPaid: BigNumberish,
      collateralRetrieved: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGraceDays(
      days_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLendingPool(
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DUST_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_DAY(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_HOUR(overrides?: CallOverrides): Promise<BigNumber>;

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimBorrowedPrincipal(
    loanId: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimCollateral(
    loanId: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimDefaultCollateral(
    loanId: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimPrincipal(
    loanId: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLoan(
    offerId: BigNumberish,
    offerType: BigNumberish,
    principalToken: string,
    collateralToken: string,
    principalAmount: BigNumberish,
    collateralAmount: BigNumberish,
    collateralPriceInUSD: BigNumberish,
    interestRate: BigNumberish,
    daysToMaturity: BigNumberish,
    unClaimedBorrowedPrincipal: BigNumberish,
    borrower: string,
    lender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLoan(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<LoanStructOutput>;

  liquidateLoan(
    loanId: BigNumberish,
    principalPaid: BigNumberish,
    collateralRetrieved: BigNumberish,
    collateralPaid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  loans(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      number,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      offerId: BigNumber;
      state: number;
      principalToken: string;
      collateralToken: string;
      initialPrincipal: BigNumber;
      currentPrincipal: BigNumber;
      initialCollateral: BigNumber;
      currentCollateral: BigNumber;
      collateralPriceInUSD: BigNumber;
      interestRate: BigNumber;
      startDate: BigNumber;
      maturityDate: BigNumber;
      graceDays: number;
      numInstallmentsPaid: number;
      unClaimedPrincipal: BigNumber;
      unClaimedCollateral: BigNumber;
      unClaimedDefaultCollateral: BigNumber;
      unClaimedBorrowedPrincipal: BigNumber;
      totalInterestPaid: BigNumber;
      repaidOn: BigNumber;
      borrower: string;
      lender: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayLoan(
    loanId: BigNumberish,
    interestPaid: BigNumberish,
    principalPaid: BigNumberish,
    collateralRetrieved: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGraceDays(
    days_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLendingPool(
    address_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DUST_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HOUR(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    claimBorrowedPrincipal(
      loanId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    claimCollateral(
      loanId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    claimDefaultCollateral(
      loanId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    claimPrincipal(
      loanId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    createLoan(
      offerId: BigNumberish,
      offerType: BigNumberish,
      principalToken: string,
      collateralToken: string,
      principalAmount: BigNumberish,
      collateralAmount: BigNumberish,
      collateralPriceInUSD: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      unClaimedBorrowedPrincipal: BigNumberish,
      borrower: string,
      lender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoan(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LoanStructOutput>;

    liquidateLoan(
      loanId: BigNumberish,
      principalPaid: BigNumberish,
      collateralRetrieved: BigNumberish,
      collateralPaid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    loans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        offerId: BigNumber;
        state: number;
        principalToken: string;
        collateralToken: string;
        initialPrincipal: BigNumber;
        currentPrincipal: BigNumber;
        initialCollateral: BigNumber;
        currentCollateral: BigNumber;
        collateralPriceInUSD: BigNumber;
        interestRate: BigNumber;
        startDate: BigNumber;
        maturityDate: BigNumber;
        graceDays: number;
        numInstallmentsPaid: number;
        unClaimedPrincipal: BigNumber;
        unClaimedCollateral: BigNumber;
        unClaimedDefaultCollateral: BigNumber;
        unClaimedBorrowedPrincipal: BigNumber;
        totalInterestPaid: BigNumber;
        repaidOn: BigNumber;
        borrower: string;
        lender: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repayLoan(
      loanId: BigNumberish,
      interestPaid: BigNumberish,
      principalPaid: BigNumberish,
      collateralRetrieved: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setGraceDays(days_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setLendingPool(address_: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LoanCreated(uint256,uint256,uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint16,address,address)"(
      loanId?: null,
      offerId?: null,
      state?: null,
      principalToken?: null,
      collateralToken?: null,
      initialPrincipal?: null,
      currentPrincipal?: null,
      initialCollateral?: null,
      currentCollateral?: null,
      interestRate?: null,
      startDate?: null,
      maturityDate?: null,
      graceDays?: null,
      borrower?: null,
      lender?: null
    ): LoanCreatedEventFilter;
    LoanCreated(
      loanId?: null,
      offerId?: null,
      state?: null,
      principalToken?: null,
      collateralToken?: null,
      initialPrincipal?: null,
      currentPrincipal?: null,
      initialCollateral?: null,
      currentCollateral?: null,
      interestRate?: null,
      startDate?: null,
      maturityDate?: null,
      graceDays?: null,
      borrower?: null,
      lender?: null
    ): LoanCreatedEventFilter;

    "LoanCreatedProperty(uint256,uint256,uint8,uint256,uint256,uint256,uint256,uint256,uint256)"(
      loanId?: null,
      collateralPriceInUSD?: null,
      numInstallmentsPaid?: null,
      unClaimedPrincipal?: null,
      unClaimedCollateral?: null,
      unClaimedDefaultCollateral?: null,
      unClaimedBorrowedPrincipal?: null,
      totalInterestPaid?: null,
      repaidOn?: null
    ): LoanCreatedPropertyEventFilter;
    LoanCreatedProperty(
      loanId?: null,
      collateralPriceInUSD?: null,
      numInstallmentsPaid?: null,
      unClaimedPrincipal?: null,
      unClaimedCollateral?: null,
      unClaimedDefaultCollateral?: null,
      unClaimedBorrowedPrincipal?: null,
      totalInterestPaid?: null,
      repaidOn?: null
    ): LoanCreatedPropertyEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    DUST_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HOUR(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimBorrowedPrincipal(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimCollateral(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimDefaultCollateral(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimPrincipal(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLoan(
      offerId: BigNumberish,
      offerType: BigNumberish,
      principalToken: string,
      collateralToken: string,
      principalAmount: BigNumberish,
      collateralAmount: BigNumberish,
      collateralPriceInUSD: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      unClaimedBorrowedPrincipal: BigNumberish,
      borrower: string,
      lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLoan(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateLoan(
      loanId: BigNumberish,
      principalPaid: BigNumberish,
      collateralRetrieved: BigNumberish,
      collateralPaid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    loans(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayLoan(
      loanId: BigNumberish,
      interestPaid: BigNumberish,
      principalPaid: BigNumberish,
      collateralRetrieved: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGraceDays(
      days_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLendingPool(
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DUST_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_DAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_HOUR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimBorrowedPrincipal(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimCollateral(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimDefaultCollateral(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimPrincipal(
      loanId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLoan(
      offerId: BigNumberish,
      offerType: BigNumberish,
      principalToken: string,
      collateralToken: string,
      principalAmount: BigNumberish,
      collateralAmount: BigNumberish,
      collateralPriceInUSD: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      unClaimedBorrowedPrincipal: BigNumberish,
      borrower: string,
      lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLoan(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateLoan(
      loanId: BigNumberish,
      principalPaid: BigNumberish,
      collateralRetrieved: BigNumberish,
      collateralPaid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    loans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayLoan(
      loanId: BigNumberish,
      interestPaid: BigNumberish,
      principalPaid: BigNumberish,
      collateralRetrieved: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGraceDays(
      days_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLendingPool(
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
