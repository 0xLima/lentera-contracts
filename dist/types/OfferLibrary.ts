/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface OfferLibraryInterface extends utils.Interface {
  functions: {};

  events: {
    "OfferCreated(uint256,uint8,address,uint256,uint256,uint256,uint16,uint256,uint256,address,address[],address,uint256,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
}

export type OfferCreatedEvent = TypedEvent<
  [
    BigNumber,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    number
  ],
  {
    offerId: BigNumber;
    state: number;
    principalToken: string;
    currentPrincipal: BigNumber;
    initialPrincipal: BigNumber;
    interestRate: BigNumber;
    daysToMaturity: number;
    expiresAt: BigNumber;
    createdAt: BigNumber;
    creator: string;
    collateralTokens: string[];
    collateralToken: string;
    currentCollateral: BigNumber;
    initialCollateral: BigNumber;
    offerType: number;
  }
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export interface OfferLibrary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OfferLibraryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "OfferCreated(uint256,uint8,address,uint256,uint256,uint256,uint16,uint256,uint256,address,address[],address,uint256,uint256,uint8)"(
      offerId?: null,
      state?: null,
      principalToken?: null,
      currentPrincipal?: null,
      initialPrincipal?: null,
      interestRate?: null,
      daysToMaturity?: null,
      expiresAt?: null,
      createdAt?: null,
      creator?: null,
      collateralTokens?: null,
      collateralToken?: null,
      currentCollateral?: null,
      initialCollateral?: null,
      offerType?: null
    ): OfferCreatedEventFilter;
    OfferCreated(
      offerId?: null,
      state?: null,
      principalToken?: null,
      currentPrincipal?: null,
      initialPrincipal?: null,
      interestRate?: null,
      daysToMaturity?: null,
      expiresAt?: null,
      createdAt?: null,
      creator?: null,
      collateralTokens?: null,
      collateralToken?: null,
      currentCollateral?: null,
      initialCollateral?: null,
      offerType?: null
    ): OfferCreatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
