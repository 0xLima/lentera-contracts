/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type OfferStruct = {
  offerId: BigNumberish;
  state: BigNumberish;
  principalToken: string;
  currentPrincipal: BigNumberish;
  initialPrincipal: BigNumberish;
  interestRate: BigNumberish;
  daysToMaturity: BigNumberish;
  expiresAt: BigNumberish;
  createdAt: BigNumberish;
  creator: string;
  collateralTokens: string[];
  collateralToken: string;
  currentCollateral: BigNumberish;
  initialCollateral: BigNumberish;
  offerType: BigNumberish;
};

export type OfferStructOutput = [
  BigNumber,
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  string,
  string[],
  string,
  BigNumber,
  BigNumber,
  number
] & {
  offerId: BigNumber;
  state: number;
  principalToken: string;
  currentPrincipal: BigNumber;
  initialPrincipal: BigNumber;
  interestRate: BigNumber;
  daysToMaturity: number;
  expiresAt: BigNumber;
  createdAt: BigNumber;
  creator: string;
  collateralTokens: string[];
  collateralToken: string;
  currentCollateral: BigNumber;
  initialCollateral: BigNumber;
  offerType: number;
};

export type RequestStruct = {
  requestId: BigNumberish;
  state: BigNumberish;
  percentage: BigNumberish;
  daysToMaturity: BigNumberish;
  interestRate: BigNumberish;
  expiresAt: BigNumberish;
  createdAt: BigNumberish;
  creator: string;
  offerId: BigNumberish;
  collateralToken: string;
  collateralAmount: BigNumberish;
  collateralPriceInUSD: BigNumberish;
  ltvUsed: BigNumberish;
  requestType: BigNumberish;
};

export type RequestStructOutput = [
  BigNumber,
  number,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  number
] & {
  requestId: BigNumber;
  state: number;
  percentage: number;
  daysToMaturity: number;
  interestRate: BigNumber;
  expiresAt: BigNumber;
  createdAt: BigNumber;
  creator: string;
  offerId: BigNumber;
  collateralToken: string;
  collateralAmount: BigNumber;
  collateralPriceInUSD: BigNumber;
  ltvUsed: BigNumber;
  requestType: number;
};

export interface IOfferManagerInterface extends utils.Interface {
  functions: {
    "acceptRequest(uint256,address)": FunctionFragment;
    "afterBorrowingLoan(uint256,uint256,uint256)": FunctionFragment;
    "afterLendingLoan(uint256,uint256)": FunctionFragment;
    "cancelRequest(uint256,address)": FunctionFragment;
    "createBorrowingOffer(address,address,uint256,uint256,uint256,uint16,uint16,address)": FunctionFragment;
    "createBorrowingRequest(uint16,address,uint256,uint256,uint160,uint256,uint16,uint16,address,uint256)": FunctionFragment;
    "createLendingOffer(address,uint256,uint256,uint16,uint16,address[],address)": FunctionFragment;
    "createLendingRequest(uint16,uint256,uint16,uint16,address,uint256)": FunctionFragment;
    "getOffer(uint256)": FunctionFragment;
    "getRequest(uint256)": FunctionFragment;
    "isCollateralSupported(uint256,address)": FunctionFragment;
    "reActivateOffer(uint256,uint16,address)": FunctionFragment;
    "rejectRequest(uint256,address)": FunctionFragment;
    "removeCollateral(uint256,address,uint256)": FunctionFragment;
    "removePrincipal(uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptRequest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "afterBorrowingLoan",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "afterLendingLoan",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRequest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createBorrowingOffer",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createBorrowingRequest",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createLendingOffer",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createLendingRequest",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollateralSupported",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reActivateOffer",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectRequest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removePrincipal",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterBorrowingLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterLendingLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBorrowingOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBorrowingRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLendingOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLendingRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRequest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCollateralSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reActivateOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePrincipal",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IOfferManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOfferManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptRequest(
      requestId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterBorrowingLoan(
      offerId: BigNumberish,
      principalAmount: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterLendingLoan(
      offerId: BigNumberish,
      principalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelRequest(
      requestId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createBorrowingOffer(
      principalToken: string,
      collateralToken: string,
      collateralAmount: BigNumberish,
      principalAmount: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createBorrowingRequest(
      percentage: BigNumberish,
      collateralToken: string,
      collateralAmount: BigNumberish,
      collateralPriceInUSD: BigNumberish,
      ltvUsed: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      borrower: string,
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLendingOffer(
      principalToken: string,
      principalAmount: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      daysToExpire: BigNumberish,
      collateralTokens: string[],
      lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLendingRequest(
      percentage: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      lender: string,
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[OfferStructOutput]>;

    getRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[RequestStructOutput]>;

    isCollateralSupported(
      offerId: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reActivateOffer(
      offerId: BigNumberish,
      toExpire: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rejectRequest(
      requestId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeCollateral(
      offerId: BigNumberish,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePrincipal(
      offerId: BigNumberish,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptRequest(
    requestId: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterBorrowingLoan(
    offerId: BigNumberish,
    principalAmount: BigNumberish,
    collateralAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterLendingLoan(
    offerId: BigNumberish,
    principalAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelRequest(
    requestId: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createBorrowingOffer(
    principalToken: string,
    collateralToken: string,
    collateralAmount: BigNumberish,
    principalAmount: BigNumberish,
    interestRate: BigNumberish,
    daysToMaturity: BigNumberish,
    hoursToExpire: BigNumberish,
    borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createBorrowingRequest(
    percentage: BigNumberish,
    collateralToken: string,
    collateralAmount: BigNumberish,
    collateralPriceInUSD: BigNumberish,
    ltvUsed: BigNumberish,
    interestRate: BigNumberish,
    daysToMaturity: BigNumberish,
    hoursToExpire: BigNumberish,
    borrower: string,
    offerId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLendingOffer(
    principalToken: string,
    principalAmount: BigNumberish,
    interestRate: BigNumberish,
    daysToMaturity: BigNumberish,
    daysToExpire: BigNumberish,
    collateralTokens: string[],
    lender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLendingRequest(
    percentage: BigNumberish,
    interestRate: BigNumberish,
    daysToMaturity: BigNumberish,
    hoursToExpire: BigNumberish,
    lender: string,
    offerId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOffer(
    offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<OfferStructOutput>;

  getRequest(
    requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<RequestStructOutput>;

  isCollateralSupported(
    offerId: BigNumberish,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reActivateOffer(
    offerId: BigNumberish,
    toExpire: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rejectRequest(
    requestId: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeCollateral(
    offerId: BigNumberish,
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePrincipal(
    offerId: BigNumberish,
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptRequest(
      requestId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    afterBorrowingLoan(
      offerId: BigNumberish,
      principalAmount: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    afterLendingLoan(
      offerId: BigNumberish,
      principalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelRequest(
      requestId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createBorrowingOffer(
      principalToken: string,
      collateralToken: string,
      collateralAmount: BigNumberish,
      principalAmount: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createBorrowingRequest(
      percentage: BigNumberish,
      collateralToken: string,
      collateralAmount: BigNumberish,
      collateralPriceInUSD: BigNumberish,
      ltvUsed: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      borrower: string,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLendingOffer(
      principalToken: string,
      principalAmount: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      daysToExpire: BigNumberish,
      collateralTokens: string[],
      lender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLendingRequest(
      percentage: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      lender: string,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OfferStructOutput>;

    getRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<RequestStructOutput>;

    isCollateralSupported(
      offerId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    reActivateOffer(
      offerId: BigNumberish,
      toExpire: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectRequest(
      requestId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeCollateral(
      offerId: BigNumberish,
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removePrincipal(
      offerId: BigNumberish,
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    acceptRequest(
      requestId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterBorrowingLoan(
      offerId: BigNumberish,
      principalAmount: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterLendingLoan(
      offerId: BigNumberish,
      principalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelRequest(
      requestId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createBorrowingOffer(
      principalToken: string,
      collateralToken: string,
      collateralAmount: BigNumberish,
      principalAmount: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createBorrowingRequest(
      percentage: BigNumberish,
      collateralToken: string,
      collateralAmount: BigNumberish,
      collateralPriceInUSD: BigNumberish,
      ltvUsed: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      borrower: string,
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLendingOffer(
      principalToken: string,
      principalAmount: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      daysToExpire: BigNumberish,
      collateralTokens: string[],
      lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLendingRequest(
      percentage: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      lender: string,
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCollateralSupported(
      offerId: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reActivateOffer(
      offerId: BigNumberish,
      toExpire: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rejectRequest(
      requestId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeCollateral(
      offerId: BigNumberish,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePrincipal(
      offerId: BigNumberish,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptRequest(
      requestId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterBorrowingLoan(
      offerId: BigNumberish,
      principalAmount: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterLendingLoan(
      offerId: BigNumberish,
      principalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelRequest(
      requestId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createBorrowingOffer(
      principalToken: string,
      collateralToken: string,
      collateralAmount: BigNumberish,
      principalAmount: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createBorrowingRequest(
      percentage: BigNumberish,
      collateralToken: string,
      collateralAmount: BigNumberish,
      collateralPriceInUSD: BigNumberish,
      ltvUsed: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      borrower: string,
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLendingOffer(
      principalToken: string,
      principalAmount: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      daysToExpire: BigNumberish,
      collateralTokens: string[],
      lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLendingRequest(
      percentage: BigNumberish,
      interestRate: BigNumberish,
      daysToMaturity: BigNumberish,
      hoursToExpire: BigNumberish,
      lender: string,
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCollateralSupported(
      offerId: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reActivateOffer(
      offerId: BigNumberish,
      toExpire: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rejectRequest(
      requestId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeCollateral(
      offerId: BigNumberish,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePrincipal(
      offerId: BigNumberish,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
